{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","assets/images/website_logo.png","componenets/Navbar.js","componenets/Home.js","componenets/AdminPanel.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","stakingContract","tokenContractAdress","stakingContractAdress","chainId","web3","errorMsg","blockchainReducer","state","action","type","payload","name","balanceof","pendingReward","allStakedAmount","userInfo","isValidator","participants","sharedWalletStakedAmount","isAllowed","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","balanceOf","getUserInfo","console","log","validatorBonusMultiplier","multiplier","allowance","parseInt","connectSuccess","connect","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","enable","request","method","accounts","TokenContractObj","TokenContract","abi","StakingContractObj","StakingContract","on","updateAccount","location","reload","eth","Contract","Navbar","useState","setButton","useDispatch","useSelector","showButton","innerWidth","useEffect","addEventListener","bgGradient","w","h","spacing","href","src","Logo","ml","mt","borderColor","borderRadius","boxShadow","variant","onClick","align","fontSize","fontWeight","p","_hover","as","FaTwitter","FaTelegramPlane","FaDiscord","Home","stakingAmount","setstakingAmount","stakingAmount2","setstakingAmount2","EnodeAdress","setEnodeAdress","usersRequest","setusersRequest","triedConnect","approveStaking","approve","send","to","address","from","withdrawStake","withdrawRewards","transferPendingRewardP","then","userinfo","maderequest","validators","index","adress","user","enodeAdress","status","minH","mx","px","alignSelf","borderWidth","alignItems","mb","value","onChange","event","target","placeholder","size","bg","x","stakeTokens","Object","keys","length","style","textAlign","addRequest","AdminPanel","requests","setrequests","getRequestsData","owner","toLowerCase","getRequestsLength","i","prevState","map","maxh","py","userAdress","defineValidator","once","err","receipt","removeValidator","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.4ef52660.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  stakingContract: null,\n  tokenContractAdress:null,\n  stakingContractAdress: null,\n  chainId: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        stakingContract: action.payload.stakingContract,\n        tokenContractAdress:action.payload.tokenContractAdress,\n        stakingContractAdress: action.payload.stakingContractAdress,\n        chainId: action.payload.chainId,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  balanceof: 0,\n  pendingReward: null,\n  allStakedAmount: 0,\n  userInfo: null,\n  isValidator: null,\n  participants: 0,\n  sharedWalletStakedAmount: 0,  \n  isAllowed: null,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: true,\n        name: action.payload.name,\n        balanceof: action.payload.balanceof,\n        pendingReward: action.payload.pendingReward,\n        allStakedAmount: action.payload.allStakedAmount,\n        userInfo: action.payload.userInfo,\n        isValidator: action.payload.isValidator,\n        participants: action.payload.participants,\n        sharedWalletStakedAmount: action.payload.sharedWalletStakedAmount,\n        isAllowed: action.payload.isAllowed,\n           \n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();        \n      let balanceof = await store\n        .getState()\n        .blockchain.smartContract.methods.balanceOf(account)\n        .call();         \n      let pendingReward = await store\n        .getState()\n        .blockchain.stakingContract.methods.pendingReward(account)\n        .call();\n      let allStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.allStakedAmount()\n        .call();\n      let userInfo = await store\n        .getState()\n        .blockchain.stakingContract.methods.getUserInfo(account)\n        .call();\n      console.log(userInfo)\n      let isValidator = await store\n        .getState()\n        .blockchain.stakingContract.methods.isValidator(account)\n        .call();\n      let multiplier = await store\n        .getState()\n        .blockchain.stakingContract.methods.validatorBonusMultiplier()\n        .call();\n      let stakingContractAdress = await store.getState().blockchain.stakingContractAdress;\n      let allowance = await store\n        .getState()\n        .blockchain.smartContract.methods.allowance(account,stakingContractAdress)\n        .call();\n\n      let isAllowed = false;\n      if(allowance>1e10){\n        isAllowed = true;\n      }\n\n      if(isValidator){\n        isValidator = \"True\";\n        userInfo[0]=userInfo[0]*10/multiplier;\n      }else{\n        isValidator = \"False\";\n      }\n\n      let participants = await store\n        .getState()\n        .blockchain.stakingContract.methods.participants()\n        .call();\n      let sharedWalletStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.sharedWalletStakedAmount()\n        .call();\n      allStakedAmount=parseInt((allStakedAmount-sharedWalletStakedAmount)*10/multiplier) +parseInt(sharedWalletStakedAmount);\n      if(account==stakingContractAdress){\n        balanceof = 0;\n      }\n      dispatch(\n        fetchDataSuccess({\n          name,\n          balanceof,\n          pendingReward,\n          allStakedAmount,\n          userInfo,\n          isValidator,\n          participants,\n          sharedWalletStakedAmount,\n          isAllowed,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport TokenContract from \"../../contracts/StandartToken.json\";\nimport StakingContract from \"../../contracts/StakingPool.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        console.log(\"connected\");        \n      } catch (error) {\n        console.error(error);\n      }      \n      try {\n        console.log(\"1\");\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        \n        //const NetworkData = await SmartContract.networks[networkId];\n        const chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(chainId);\n        if (chainId==\"0x542\") {       //0xa86a mainnetin chain id'si, 0xa869 fuji netin chain idsi\n          const tokenContractAdress = \"0x3118439bD7BE875eF35Fd34077d08573448769C4\";\n          const stakingContractAdress = \"0x3631146D53881D50a3a9793218E955afF54757EC\";\n          const TokenContractObj = new Web3EthContract(                      \n            TokenContract.abi,\n            tokenContractAdress\n          );\n          const StakingContractObj = new Web3EthContract(                    \n            StakingContract.abi,\n            stakingContractAdress\n          );\n          console.log(TokenContractObj);\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: TokenContractObj,\n              stakingContract: StakingContractObj,\n              tokenContractAdress:tokenContractAdress,\n              stakingContractAdress: stakingContractAdress,\n              chainId: true,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });          \n          // Add listeners end\n        }else if(chainId==\"0x4de\"){\n          const tokenContractAdress = \"0x95C1A7F0640129F1Ab6c963EA706A7Ac9658fAcd\";\n          const stakingContractAdress = \"0x759b2B472Ae1D0B5b9C6452fD017f9C8FccF55D2\";\n          const TokenContractObj = new Web3EthContract(                      \n            TokenContract.abi,\n            tokenContractAdress\n          );\n          const StakingContractObj = new Web3EthContract(                    \n            StakingContract.abi,\n            stakingContractAdress\n          );\n          console.log(TokenContractObj);\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: TokenContractObj,\n              stakingContract: StakingContractObj,\n              tokenContractAdress:tokenContractAdress,\n              stakingContractAdress: stakingContractAdress,\n              chainId: true,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n        } \n        else {\n\n          let web3 = new Web3(\"https://api.oneng.network\");\n          const tokenContractAdress = \"0x3118439bD7BE875eF35Fd34077d08573448769C4\";\n          const stakingContractAdress = \"0x3631146D53881D50a3a9793218E955afF54757EC\";\n          const TokenContractObj = new web3.eth.Contract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            TokenContract.abi,\n            tokenContractAdress\n          );\n          const StakingContractObj = new web3.eth.Contract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            StakingContract.abi,\n            stakingContractAdress\n          ); \n          console.log(\"Wrong Chain\");         \n          dispatch(\n            connectSuccess({\n              account: \"0x6E0d54B00baa5F7Be20f95e6c18Cf291b6f6A765\",\n              smartContract: TokenContractObj,\n              stakingContract: StakingContractObj,\n              tokenContractAdress: tokenContractAdress,\n              stakingContractAdress: stakingContractAdress,\n              chainId: false,\n              web3: web3,\n            })\n          );\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      \n      let web3 = new Web3(\"https://api.oneng.network\");\n      const tokenContractAdress = \"0x3118439bD7BE875eF35Fd34077d08573448769C4\";\n          const stakingContractAdress = \"0x3631146D53881D50a3a9793218E955afF54757EC\";\n      const TokenContractObj = new web3.eth.Contract(\n        //SmartContract.abi,\n        //NetworkData.address            \n        TokenContract.abi,\n        tokenContractAdress\n      );\n      const StakingContractObj = new web3.eth.Contract(\n        //SmartContract.abi,\n        //NetworkData.address            \n        StakingContract.abi,\n        stakingContractAdress\n      );\n      console.log(\"Metamask not Installed\");\n      dispatch(\n        connectSuccess({\n          account: \"0x6E0d54B00baa5F7Be20f95e6c18Cf291b6f6A765\",\n          smartContract: TokenContractObj,\n          stakingContract: StakingContractObj,\n          tokenContractAdress: tokenContractAdress,\n          stakingContractAdress: stakingContractAdress,\n          chainId: null,\n          web3: web3,\n        })\n      );\n\n      //dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","export default __webpack_public_path__ + \"static/media/website_logo.21d24f2c.png\";","import React, { useState, useEffect } from 'react'\nimport { Box, HStack, Image, Flex, Spacer , Button, VStack, Text} from '@chakra-ui/react'\nimport Logo from \"../assets/images/website_logo.png\"\nimport { FaTwitter, FaTelegramPlane, FaDiscord } from \"react-icons/fa\"\nimport { Icon } from '@chakra-ui/icons';\nimport { connect } from \"../redux/blockchain/blockchainActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction Navbar() {\n    const [click, setClick] = useState(false);\n    const [button, setButton] = useState(true);\n    const dispatch = useDispatch();\n    const handleClick = () => setClick(!click);\n    const closeMobileMenu = () => setClick(false)\n    const blockchain = useSelector((state) => state.blockchain);\n\n    const showButton = () => {\n        if (window.innerWidth <= 960) {\n            setButton(false);\n        } else {\n            setButton(true);\n        }\n    };\n\n    useEffect(() => {\n        showButton();\n    }, []);\n\n    window.addEventListener('resize', showButton);\n\n    return (\n        <div>\n            <Flex\n                bgGradient='linear(to-b, gray.300, #F9A602)'\n                w='100%'\n                h='14vh'\n                spacing='auto'                \n                \n            >\n                <a href=\"\" >          \n                    <Image\n                        src={Logo}\n                        ml='3vw' \n                        mt='3vh'              \n                        h='8vh'  \n                    />\n                </a>\n                <Box ml='30vw' mt = '3vh'>\n                    {blockchain.account === \"\" || blockchain.smartContract === null?(\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\" \n                        onClick={() => {\n                        dispatch(connect())\n                        }}>\n                        connect\n                    </Button>\n                    ):(\n                        <div>\n                        {blockchain.chainId===null?(\n                            <Text>Please install Metamask</Text>\n                        ):(\n                            <div>\n                            {blockchain.chainId ?(\n                                <VStack>\n                                    <Text>Connected</Text>\n                                    <Text>{blockchain.account}</Text>\n                                </VStack>\n                            ):(\n                                <Text>Please change network to ONENG</Text>\n                            )}\n                            </div>\n                        \n                        )}\n                        </div>\n                        \n                    )}\n                </Box>\n                \n                \n                <Spacer />\n                \n                <HStack >\n                    \n                    <Spacer />\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href=''>\n                            <Icon as={FaTwitter} />\n                        </a>\n                    </Box>\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href=''>\n                            <Icon as={FaTelegramPlane} />\n                        </a>\n                    </Box>\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href=''>\n                            <Icon as={FaDiscord} />\n                        </a>\n                    </Box>\n                </HStack>\n            </Flex>\n\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"../redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"../redux/data/dataActions\";\r\nimport { Box, Container, Text, Spacer, VStack, HStack, Button, Center, Flex, Image, Input } from \"@chakra-ui/react\";\r\nimport Navbar from \"./Navbar\";\r\n\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [stakingAmount, setstakingAmount] = useState(0);\r\n  const handleChange = event => setstakingAmount(event.target.value);\r\n\r\n  const [stakingAmount2, setstakingAmount2] = useState(0);\r\n  const handleChange2 = event => setstakingAmount2(event.target.value);\r\n\r\n  const [EnodeAdress, setEnodeAdress] = useState(\"\");\r\n  const handleChangeEnodeAdress = event => setEnodeAdress(event.target.value);\r\n  const [usersRequest, setusersRequest] = useState({});\r\n\r\n\r\n  var triedConnect = false;\r\n\r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n\r\n  const validatorApply = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      blockchain.stakingContract.methods\r\n        .addRequest(EnodeAdress)\r\n        .send({\r\n          to: blockchain.smartContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n  const approveStaking = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n\r\n      blockchain.smartContract.methods\r\n        .approve(blockchain.stakingContractAdress, 1e12)\r\n        .send({\r\n          to: blockchain.smartContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n  const StakeSharedWallet = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      blockchain.stakingContract.methods\r\n        .stakeTokens(stakingAmount * 1e2, false)\r\n        .send({\r\n          to: blockchain.stakingContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n  const Stake = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      blockchain.stakingContract.methods\r\n        .stakeTokens(stakingAmount2 * 1e2, true)\r\n        .send({\r\n          to: blockchain.stakingContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n  const withdrawStake = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      blockchain.stakingContract.methods\r\n        .withdrawStake()\r\n        .send({\r\n          to: blockchain.stakingContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n  const withdrawRewards = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      blockchain.stakingContract.methods\r\n        .transferPendingRewardP()\r\n        .send({\r\n          to: blockchain.stakingContract.address, // Smart Contract Adress\r\n          from: blockchain.account,\r\n        })\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (blockchain.account != null) {\r\n      blockchain.stakingContract.methods.userInfo(blockchain.account).call()\r\n        .then((userinfo) => {\r\n          if (userinfo.maderequest) {\r\n            blockchain.stakingContract.methods.validators(userinfo.index).call()\r\n              .then((request) => {\r\n                setusersRequest({ adress: request.user, enodeAdress: request.enodeAdress, status: request.status });\r\n              })\r\n          }\r\n        })\r\n\r\n    }\r\n\r\n  }, [blockchain.account]);\r\n\r\n  useEffect(() => {\r\n    //console.log(blockchain.chainId)\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      getData();\r\n    } else {\r\n      if (!triedConnect) {\r\n        triedConnect = true;\r\n        dispatch(connect())\r\n      }\r\n    }\r\n  }, [blockchain.smartContract, blockchain.account]);\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <VStack w='100%' minH='80vh' bgGradient='linear(to-t, #F9A602, black)' >\r\n        <VStack w='100%' mx={'5vw'} px={'5vw'} mt={'3%'}>\r\n          <Box w='50%' h='30vh' borderRadius={80} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} borderColor='#F9A602' borderWidth={'2px'} boxShadow='dark-lg'>\r\n            <HStack>\r\n              <VStack alignItems={'middle'} w='50%' mt='4%' ml='10%'>\r\n                {blockchain.account === null || data.isAllowed === null ? (\r\n                  null\r\n                ) : (\r\n                  <div>\r\n                    {data.isAllowed ? (\r\n                      <VStack alignItems={'center'} mt='15%'>\r\n                        <HStack mb='10%'>\r\n                          <Input value={stakingAmount} onChange={handleChange} placeholder=\"Amount to Stake\" size=\"sm\" borderRadius='20' bg='white.200' w={'50%'} x />\r\n                          <Button size='sm' bg='alpha'\r\n                            _hover={{ bg: \"alpha\" }}\r\n                            onClick={() => {\r\n                              setstakingAmount(data.balanceof / 1e2);\r\n                            }}>\r\n                            Max\r\n                          </Button>\r\n                        </HStack>\r\n\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            StakeSharedWallet()\r\n                          }}>\r\n                          StakeSharedWallet\r\n                        </Button>\r\n                      </VStack>\r\n                    ) : (\r\n                      <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                        onClick={() => {\r\n                          approveStaking()\r\n                        }}>\r\n                        Approve\r\n                      </Button>\r\n                    )}\r\n                    {data.userInfo[0] > 0 ? (\r\n                      <div>\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            withdrawRewards()\r\n                          }}>\r\n                          Withdraw Rewards\r\n                        </Button>\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            withdrawStake()\r\n                          }}>\r\n                          Withdraw Stake\r\n                        </Button>\r\n                      </div>\r\n                    ) : (\r\n                      null\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </VStack>\r\n              <Spacer />\r\n              <VStack w='50%'>\r\n                {blockchain.account === null || !data.loading || data.pendingReward === null ? (\r\n                  null\r\n                ) : (\r\n                  <div>\r\n                    <Text>User Staked Amount: {data.userInfo[0] / 1e2} ST</Text>\r\n                    <Text>Pending Reward: {data.pendingReward / 1e18} ONGCT</Text>\r\n                    <Text>Shared Wallet Staked Amount: {data.sharedWalletStakedAmount / 1e2} ST</Text>\r\n                    <Text>Number of Participants: {data.participants}</Text>\r\n                  </div>\r\n                )}\r\n\r\n              </VStack>\r\n            </HStack>\r\n          </Box>\r\n          <Box w='50%' h='30vh' borderRadius={80} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} borderColor='#F9A602' borderWidth={'2px'} boxShadow='dark-lg'>\r\n            <HStack>\r\n              <VStack alignItems={'middle'} w='50%' mt='4%' ml='10%'>\r\n                {blockchain.account === null || data.isAllowed === null ? (\r\n                  null\r\n                ) : (\r\n                  <div>\r\n                    {data.isAllowed ? (\r\n                      <VStack alignItems={'center'} mt='15%'>\r\n                        <HStack mb='10%'>\r\n                          <Input value={stakingAmount2} onChange={handleChange2} placeholder=\"Amount to Stake\" size=\"sm\" borderRadius='20' bg='white.200' w={'50%'} x />\r\n                          <Button size='sm' bg='alpha'\r\n                            _hover={{ bg: \"alpha\" }}\r\n                            onClick={() => {\r\n                              setstakingAmount2(data.balanceof / 1e2);\r\n                            }}>\r\n                            Max\r\n                          </Button>\r\n                        </HStack>\r\n\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            Stake()\r\n                          }}>\r\n                          Stake\r\n                        </Button>\r\n                      </VStack>\r\n                    ) : (\r\n                      <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                        onClick={() => {\r\n                          approveStaking()\r\n                        }}>\r\n                        Approve\r\n                      </Button>\r\n                    )}\r\n                    {data.userInfo[0] > 0 ? (\r\n                      <div>\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            withdrawRewards()\r\n                          }}>\r\n                          Withdraw Rewards\r\n                        </Button>\r\n                        <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                          onClick={() => {\r\n                            withdrawStake()\r\n                          }}>\r\n                          Withdraw Stake\r\n                        </Button>\r\n                      </div>\r\n                    ) : (\r\n                      null\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </VStack>\r\n              <Spacer />\r\n              <VStack w='50%'>\r\n                {blockchain.account === null || !data.loading || data.pendingReward === null ? (\r\n                  null\r\n                ) : (\r\n                  <div>\r\n                    <Text>User Staked Amount: {data.userInfo[0] / 1e2} ST</Text>\r\n                    <Text>Pending Reward: {data.pendingReward / 1e18} ONGCT</Text>\r\n                    <Text>Staked Amount: {(data.allStakedAmount - data.sharedWalletStakedAmount) / 1e2} ST</Text>\r\n                    <Text>Number of Participants: {data.participants}</Text>\r\n                  </div>\r\n                )}\r\n\r\n              </VStack>\r\n            </HStack>\r\n          </Box>\r\n          <Box w='30vw' h='30vh' bg='red' borderRadius={100} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} >\r\n            <VStack alignItems={'center'} mt='4%'>\r\n              {blockchain.account === \"\" || blockchain.smartContract === null  ? (\r\n                <Text>Please install Metamask and connect to ONENG chain</Text>\r\n              ) : (\r\n                <div>\r\n                  {blockchain.chainId ? (\r\n                    <VStack>\r\n                      <Text>\r\n                        {blockchain.account}\r\n                      </Text>\r\n                      <Text>\r\n                        Balance: {data.balanceof / 1e2}\r\n                      </Text>\r\n                      <Text>Is Validator: {data.isValidator}</Text>\r\n\r\n                    </VStack>\r\n                  ) : (\r\n                    <div>\r\n                    <Text>Please connect to ONENG chain</Text>                    \r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n\r\n              )}\r\n\r\n            </VStack>\r\n          </Box>\r\n        </VStack>\r\n        <Box w='30vw' h='30vh' bg='red' borderRadius={100} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} >\r\n          <VStack alignItems={'center'} mt='4%'>\r\n            {!(Object.keys(usersRequest).length === 0) ? (\r\n              <div>\r\n                <Text style={{ textAlign: \"center\" }}>  <strong>You have a request! </strong> </Text>\r\n                <Text style={{ textAlign: \"center\" }}>  Enode Adress: {usersRequest.enodeAdress} </Text>\r\n                <Text style={{ textAlign: \"center\" }}>  <strong> Status:</strong> <strong>{usersRequest.status} </strong></Text>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Input value={EnodeAdress} onChange={handleChangeEnodeAdress} placeholder=\"Enode Adress\" size=\"sm\" borderRadius='20' bg='white.200' w={'30%'} x />\r\n\r\n                <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                  onClick={() => {\r\n                    validatorApply()\r\n                  }}>\r\n                  Apply to be a Validator\r\n                </Button>\r\n              </div>\r\n            )\r\n            }\r\n\r\n\r\n          </VStack>\r\n        </Box>\r\n\r\n\r\n      </VStack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"../redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"../redux/data/dataActions\";\r\nimport { Box, Container, Text, Spacer, VStack, HStack, Button, Center, Flex, Image, Input } from \"@chakra-ui/react\";\r\nimport Navbar from \"./Navbar\";\r\n\r\n\r\nfunction AdminPanel() {\r\n    const dispatch = useDispatch();\r\n    const blockchain = useSelector((state) => state.blockchain);\r\n    const data = useSelector((state) => state.data);\r\n    const [id, setid] = useState(\"\");\r\n    const handleChangeid = event => setid(event.target.value);\r\n    const [password, setpassword] = useState(\"\");\r\n    const handleChangepassword = event => setpassword(event.target.value);\r\n    const [requests, setrequests] = useState([]);\r\n    var triedConnect = false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const getRequestsData = () => {\r\n        if (blockchain.account != null) {\r\n            blockchain.stakingContract.methods.owner().call()\r\n                .then((owner) => {\r\n                    console.log(blockchain.account)\r\n                    console.log(owner)\r\n                    if (blockchain.account.toLowerCase() == owner.toLowerCase()) {\r\n                        console.log(1)\r\n                        setrequests([]);\r\n                        blockchain.stakingContract.methods.getRequestsLength().call()\r\n                            .then((length) => {\r\n                                console.log(length)\r\n                                for (let i = 0; i < length; i++) {\r\n                                    blockchain.stakingContract.methods.validators(i).call()\r\n                                        .then((request) => {\r\n                                            setrequests((prevState) => [\r\n                                                ...prevState,\r\n                                                { adress: request.user, enodeAdress: request.enodeAdress, status: request.status },\r\n                                            ]);\r\n                                        })\r\n                                }\r\n                            })\r\n\r\n                    }\r\n                })\r\n\r\n        }\r\n    };\r\n\r\n    const approveValidator = (userAdress) => {\r\n        //console.log(userAdress) \r\n        if (blockchain.account != null) {\r\n            blockchain.stakingContract.methods\r\n                .defineValidator(userAdress, true)\r\n                .send({\r\n                    to: blockchain.stakingContract.address, // Smart Contract Adress\r\n                    from: blockchain.account,\r\n                })\r\n                .once(\"error\", (err) => {\r\n                    console.log(err);\r\n                })\r\n                .then((receipt) => {\r\n                    getRequestsData();\r\n                });\r\n\r\n        } else {\r\n            console.log(\"you are not connected\")\r\n        }\r\n    };\r\n\r\n    const removeValidator = (userAdress) => {\r\n        //console.log(userAdress) \r\n        if (blockchain.account != null) {\r\n            blockchain.stakingContract.methods\r\n                .removeValidator(userAdress)\r\n                .send({\r\n                    to: blockchain.stakingContract.address, // Smart Contract Adress\r\n                    from: blockchain.account,\r\n                })\r\n                .once(\"error\", (err) => {\r\n                    console.log(err);\r\n                })\r\n                .then((receipt) => {\r\n                    getRequestsData();\r\n                });\r\n\r\n        } else {\r\n            console.log(\"you are not connected\")\r\n        }\r\n    };\r\n\r\n\r\n    const getData = () => {\r\n        if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n            dispatch(fetchData(blockchain.account));\r\n        }\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n            getData();\r\n            getRequestsData();\r\n        } else {\r\n            if (!triedConnect) {\r\n                triedConnect = true;\r\n                dispatch(connect())\r\n            }\r\n        }\r\n    }, [blockchain.smartContract, blockchain.account]);\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <VStack w='100%' minH='80vh' bgGradient='linear(to-t, #F9A602, black)' >\r\n\r\n                {requests.map((usersRequest, index) => {\r\n\r\n                    return (\r\n                        <VStack align='center' key={index} w='90vw' maxh='20vh' bg='whiteAlpha.600' py='1vh' mt='3vh' borderRadius={40} boxShadow='xl' spacing='1%'>\r\n                            <Text style={{ textAlign: \"center\" }}>  <strong>{usersRequest.adress} </strong> </Text>\r\n                            <Text style={{ textAlign: \"center\" }}>  {usersRequest.enodeAdress} </Text>\r\n                            <Text style={{ textAlign: \"center\" }}>  <strong> Status:</strong> <strong>{usersRequest.status} </strong></Text>\r\n                            {usersRequest.status === \"pending\" ? (\r\n                                <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                                    onClick={() => {\r\n                                        approveValidator(usersRequest.adress);\r\n                                    }}>\r\n                                    Enable To Stake\r\n                                </Button>\r\n                            ) : (\r\n                                <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                                    onClick={() => {\r\n                                        removeValidator(usersRequest.adress);\r\n                                    }}>\r\n                                    Remove Validator\r\n                                </Button>\r\n                            )}\r\n\r\n                        </VStack>\r\n                    );\r\n                })\r\n                }\r\n\r\n            </VStack>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminPanel;\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Home from \"./componenets/Home\";\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport AdminPanel from \"./componenets/AdminPanel\";\nimport Navbar from \"./componenets/Navbar\";\nfunction App() {\n\n\n\n  return (\n    <div>\n      <Router>\n      <Navbar />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/adminpanel' exact component={AdminPanel} />\n        </Switch>\n        \n      </Router> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider resetCSS>  \n        <App />      \n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}