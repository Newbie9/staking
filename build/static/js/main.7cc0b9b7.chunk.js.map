{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","assets/images/website_logo.png","componenets/Navbar.js","componenets/Home.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","stakingContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","balanceof","pendingReward","allStakedAmount","userInfo","isValidator","participants","sharedWalletStakedAmount","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","balanceOf","getUserInfo","console","log","connectFailed","updateAccount","Navbar","useState","setButton","showButton","window","innerWidth","useEffect","addEventListener","bg","w","h","spacing","align","fontSize","fontWeight","p","borderRadius","_hover","href","as","FaTwitter","FaTelegramPlane","FaDiscord","Home","useDispatch","useSelector","stakingAmount","setstakingAmount","handleChange","event","target","value","approveStaking","approve","send","to","address","from","withdrawRewards","transferPendingRewardP","minH","bgGradient","mx","px","mt","alignSelf","alignItems","borderColor","boxShadow","variant","onClick","onChange","placeholder","size","x","stakeTokens","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","enable","request","method","accounts","chainId","TokenContractObj","TokenContract","abi","StakingContractObj","StakingContract","on","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.7cc0b9b7.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  stakingContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        stakingContract: action.payload.stakingContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  balanceof: 0,\n  pendingReward: 0,\n  allStakedAmount: 0,\n  userInfo: null,\n  isValidator: null,\n  participants: 0,\n  sharedWalletStakedAmount: 0,  \n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        name: action.payload.name,\n        balanceof: action.payload.balanceof,\n        pendingReward: action.payload.pendingReward,\n        allStakedAmount: action.payload.allStakedAmount,\n        userInfo: action.payload.userInfo,\n        isValidator: action.payload.isValidator,\n        participants: action.payload.participants,\n        sharedWalletStakedAmount: action.payload.sharedWalletStakedAmount,\n           \n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();        \n      let balanceof = await store\n        .getState()\n        .blockchain.smartContract.methods.balanceOf(account)\n        .call();         \n      let pendingReward = await store\n        .getState()\n        .blockchain.stakingContract.methods.pendingReward(account)\n        .call();\n      let allStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.allStakedAmount()\n        .call();\n      let userInfo = await store\n        .getState()\n        .blockchain.stakingContract.methods.getUserInfo(account)\n        .call();\n      console.log(userInfo)\n      let isValidator = await store\n        .getState()\n        .blockchain.stakingContract.methods.isValidator(account)\n        .call();\n      if(isValidator){\n        isValidator = \"True\";\n      }else{\n        isValidator = \"False\";\n      }\n\n      let participants = await store\n        .getState()\n        .blockchain.stakingContract.methods.participants()\n        .call();\n      let sharedWalletStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.sharedWalletStakedAmount()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n          balanceof,\n          pendingReward,\n          allStakedAmount,\n          userInfo,\n          isValidator,\n          participants,\n          sharedWalletStakedAmount,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport TokenContract from \"../../contracts/StandartToken.json\";\nimport StakingContract from \"../../contracts/StakingPool.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        console.log(\"connected\");        \n      } catch (error) {\n        console.error(error);\n      }      \n      try {\n        console.log(\"1\");\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        \n        //const NetworkData = await SmartContract.networks[networkId];\n        const chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(chainId);\n        if (chainId==\"0x4de\") {       //0xa86a mainnetin chain id'si, 0xa869 fuji netin chain idsi\n          const TokenContractObj = new Web3EthContract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            TokenContract.abi,\n            \"0x95C1A7F0640129F1Ab6c963EA706A7Ac9658fAcd\"\n          );\n          const StakingContractObj = new Web3EthContract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            StakingContract.abi,\n            \"0x06bF00a9e9c7721CF0EeDB3dd80dfF2a6E678e11\"\n          );\n          console.log(StakingContractObj);\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: TokenContractObj,\n              stakingContract: StakingContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });          \n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Avalanche.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","export default __webpack_public_path__ + \"static/media/website_logo.30ee4a2b.png\";","import React, { useState, useEffect } from 'react'\nimport { Box, HStack, Image, Flex, Spacer } from '@chakra-ui/react'\nimport Logo from \"../assets/images/website_logo.png\"\nimport { FaTwitter, FaTelegramPlane, FaDiscord } from \"react-icons/fa\"\nimport { Icon } from '@chakra-ui/icons';\n\n\nfunction Navbar() {\n    const [click, setClick] = useState(false);\n    const [button, setButton] = useState(true);\n\n    const handleClick = () => setClick(!click);\n    const closeMobileMenu = () => setClick(false)\n\n    const showButton = () => {\n        if (window.innerWidth <= 960) {\n            setButton(false);\n        } else {\n            setButton(true);\n        }\n    };\n\n    useEffect(() => {\n        showButton();\n    }, []);\n\n    window.addEventListener('resize', showButton);\n\n    return (\n        <div>\n            <Flex\n                bg='yellow.500'\n                w='100%'\n                h='16vh'\n                spacing='auto'\n                \n                \n            >\n                <Spacer />\n                <HStack >\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href='https://avaxfoxes.com/'>\n                            <Icon as={FaTwitter} />\n                        </a>\n                    </Box>\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href='https://avaxfoxes.com/'>\n                            <Icon as={FaTelegramPlane} />\n                        </a>\n                    </Box>\n                    <Box\n                        align='center'\n                        w='4vw'\n                        fontSize='3xl'\n                        fontWeight='semibold'\n                        p='3'\n                        borderRadius='xl'\n                        _hover={{ borderRadius: 'xl', fontSize: '4xl' }}\n                    >\n                        <a href='https://avaxfoxes.com/'>\n                            <Icon as={FaDiscord} />\n                        </a>\n                    </Box>\n                </HStack>\n            </Flex>\n\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"../redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"../redux/data/dataActions\";\r\nimport { Box, Container, Text, Spacer, VStack, HStack, Button, Center, Flex, Image, Input } from \"@chakra-ui/react\";\r\nimport Navbar from \"./Navbar\";\r\n\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day.\");\r\n  const [claimingNft, setClaimingNft] = useState(false);\r\n  const [amount, setAmount] = useState(1);\r\n  const [stakingAmount, setstakingAmount] = useState(0);\r\n  const handleChange = event => setstakingAmount(event.target.value);\r\n\r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n  const approveStaking = () => {\r\n    //console.log(blockchain.stakingContract.address)\r\n\r\n    blockchain.smartContract.methods\r\n      .approve(\"0x06bF00a9e9c7721CF0EeDB3dd80dfF2a6E678e11\", 1e12)\r\n      .send({\r\n        to: blockchain.smartContract.address, // Smart Contract Adress\r\n        from: blockchain.account,\r\n      })\r\n  };\r\n  const StakeSharedWallet = () => {\r\n    //console.log(blockchain.stakingContract.methods)\r\n    blockchain.stakingContract.methods\r\n      .stakeTokens(stakingAmount * 1e2, false)\r\n      .send({\r\n        to: blockchain.stakingContract.address, // Smart Contract Adress\r\n        from: blockchain.account,\r\n      })\r\n  };\r\n  const Stake = () => {\r\n    //console.log(blockchain.account)\r\n    blockchain.stakingContract.methods\r\n      .stakeTokens(stakingAmount * 1e2, true)\r\n      .send({\r\n        to: blockchain.stakingContract.address, // Smart Contract Adress\r\n        from: blockchain.account,\r\n      })\r\n  };\r\n  const withdrawStake = () => {\r\n    //console.log(blockchain.account)\r\n    blockchain.stakingContract.methods\r\n      .withdrawStake(data.userInfo[0])\r\n      .send({\r\n        to: blockchain.stakingContract.address, // Smart Contract Adress\r\n        from: blockchain.account,\r\n      })\r\n  };\r\n  const withdrawRewards = () => {\r\n    //console.log(blockchain.account)\r\n    blockchain.stakingContract.methods\r\n      .transferPendingRewardP()\r\n      .send({\r\n        to: blockchain.stakingContract.address, // Smart Contract Adress\r\n        from: blockchain.account,\r\n      })\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [blockchain.account]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <VStack w='100%' minH='80vh' bgGradient='linear(to-t, #F9A602, gray.700)' >\r\n        <HStack w='100%' h='30vh' mx={'5vw'} px={'5vw'} mt={'8%'}>\r\n          <Box w='30vw' h='30vh' bg='red' borderRadius={100} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} >\r\n            <VStack alignItems={'center'} mt='4%'>\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  approveStaking()\r\n                }}>\r\n                Approve\r\n              </Button>\r\n\r\n              <Input value={stakingAmount} onChange={handleChange} placeholder=\"Amount to Stake\" size=\"sm\" borderRadius='20' bg='white.200' w={'30%'} x />\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  StakeSharedWallet()\r\n                }}>\r\n                StakeSharedWallet\r\n              </Button>\r\n\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  withdrawRewards()\r\n                }}>\r\n                withdrawRewards\r\n              </Button>\r\n            </VStack>\r\n          </Box>\r\n          <Box w='30vw' h='30vh' bg='red' borderRadius={100} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} >\r\n            <VStack alignItems={'center'} mt='4%'>\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  approveStaking()\r\n                }}>\r\n                Approve\r\n              </Button>\r\n\r\n              <Input value={stakingAmount} onChange={handleChange} placeholder=\"Amount to Stake\" size=\"sm\" borderRadius='20' bg='white.200' w={'30%'} x />\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  Stake()\r\n                }}>\r\n                Stake\r\n              </Button>\r\n\r\n              <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                onClick={() => {\r\n                  withdrawRewards()\r\n                }}>\r\n                withdrawRewards\r\n              </Button>\r\n            </VStack>\r\n          </Box>\r\n          <Box w='30vw' h='30vh' bg='red' borderRadius={100} bgGradient='radial(#F9A602, white)' alignSelf={'middle'} >\r\n            <VStack alignItems={'center'} mt='4%'>\r\n              {blockchain.account === \"\" || blockchain.smartContract === null || data.userInfo===null ? (\r\n                <Button borderColor=\"black\" borderRadius='20' boxShadow='lg' variant=\"outline\"\r\n                  onClick={() => {\r\n                    dispatch(connect())\r\n                  }}>\r\n                  connect\r\n                </Button>\r\n              ) : (\r\n                <VStack>\r\n                  <Text>\r\n                    {blockchain.account}\r\n                  </Text>\r\n                  <Text>\r\n                    Balance: {data.balanceof / 1e2}\r\n                  </Text>\r\n\r\n                  <Text>Pending Reward: {data.pendingReward / 1e18}</Text>\r\n                  <Text>All Staked Amount: {data.allStakedAmount / 1e2}</Text>\r\n                  <Text>User Staked Amount: {data.userInfo[0] / 1e2}</Text>\r\n                  <Text>Is Validator: {data.isValidator}</Text>\r\n                  <Text>Number of Participants: {data.participants}</Text>\r\n                  <Text>Shared Wallet Staked Amount: {data.sharedWalletStakedAmount / 1e2}</Text>\r\n\r\n                </VStack>\r\n\r\n              )}\r\n\r\n            </VStack>\r\n          </Box>\r\n        </HStack>\r\n\r\n\r\n      </VStack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Home from \"./componenets/Home\";\n\nfunction App() {\n\n\n\n  return (\n    <div>\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider resetCSS>  \n        <App />      \n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}