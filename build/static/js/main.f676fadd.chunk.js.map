{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","assets/images/website_logo.png","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","stakingContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","totalSupply","pendingReward","allStakedAmount","userInfo","isValidator","participants","sharedWalletStakedAmount","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","getUserInfo","console","log","connectFailed","updateAccount","App","useDispatch","useSelector","useState","stakingAmount","setstakingAmount","useEffect","w","minH","alignItems","bg","borderColor","borderRadius","boxShadow","variant","onClick","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","enable","request","method","accounts","chainId","TokenContractObj","TokenContract","abi","StakingContractObj","StakingContract","on","location","reload","approve","send","to","address","from","then","receipt","value","onChange","event","target","placeholder","size","x","stakeTokens","withdrawStake","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.f676fadd.chunk.js","sourcesContent":["const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  stakingContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        stakingContract: action.payload.stakingContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  totalSupply: 0,\n  pendingReward: 0,\n  allStakedAmount: 0,\n  userInfo: null,\n  isValidator: null,\n  participants: 0,\n  sharedWalletStakedAmount: 0,  \n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        name: action.payload.name,\n        totalSupply: action.payload.totalSupply,\n        pendingReward: action.payload.pendingReward,\n        allStakedAmount: action.payload.allStakedAmount,\n        userInfo: action.payload.userInfo,\n        isValidator: action.payload.isValidator,\n        participants: action.payload.participants,\n        sharedWalletStakedAmount: action.payload.sharedWalletStakedAmount,\n           \n        error: false,\n        errorMsg: \"\",\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();        \n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();         \n      let pendingReward = await store\n        .getState()\n        .blockchain.stakingContract.methods.pendingReward(account)\n        .call();\n      let allStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.allStakedAmount()\n        .call();\n      let userInfo = await store\n        .getState()\n        .blockchain.stakingContract.methods.getUserInfo(account)\n        .call();\n      //console.log(userInfo[0])\n      let isValidator = await store\n        .getState()\n        .blockchain.stakingContract.methods.isValidator(account)\n        .call();\n      if(isValidator){\n        isValidator = \"True\";\n      }else{\n        isValidator = \"False\";\n      }\n\n      let participants = await store\n        .getState()\n        .blockchain.stakingContract.methods.participants()\n        .call();\n      let sharedWalletStakedAmount = await store\n        .getState()\n        .blockchain.stakingContract.methods.sharedWalletStakedAmount()\n        .call();\n\n      dispatch(\n        fetchDataSuccess({\n          name,\n          totalSupply,\n          pendingReward,\n          allStakedAmount,\n          userInfo,\n          isValidator,\n          participants,\n          sharedWalletStakedAmount,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport TokenContract from \"../../contracts/StandartToken.json\";\nimport StakingContract from \"../../contracts/StakingPool.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        console.log(\"connected\");        \n      } catch (error) {\n        console.error(error);\n      }      \n      try {\n        console.log(\"1\");\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        \n        //const NetworkData = await SmartContract.networks[networkId];\n        const chainId = await ethereum.request({ method: 'eth_chainId' });\n        console.log(chainId);\n        if (chainId==\"0xa869\") {       //0xa86a mainnetin chain id'si, 0xa869 fuji netin chain idsi\n          const TokenContractObj = new Web3EthContract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            TokenContract.abi,\n            \"0x82310AFcA15D7B09D5f7aEedDE4367CD63D7df01\"\n          );\n          const StakingContractObj = new Web3EthContract(\n            //SmartContract.abi,\n            //NetworkData.address            \n            StakingContract.abi,\n            \"0xb66Ea41efee7C3Fa41E2137531F6ff08392eC8Af\"\n          );\n          console.log(StakingContractObj);\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: TokenContractObj,\n              stakingContract: StakingContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });          \n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Avalanche.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","export default __webpack_public_path__ + \"static/media/website_logo.30ee4a2b.png\";","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Box, Container, Text, Spacer, VStack, HStack, Button, Center, Flex, Image , Input } from \"@chakra-ui/react\";\nimport Navbar from \"./componenets/Navbar\";\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day.\");\n  const [claimingNft, setClaimingNft] = useState(false);\n  const [amount, setAmount] = useState(1);\n  const [stakingAmount, setstakingAmount] = useState(0);\n  const handleChange = event => setstakingAmount(event.target.value);\n  \n\n  const getData = () => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  };\n  const approveStaking = () => {\n    //console.log(blockchain.stakingContract.address)\n\n    blockchain.smartContract.methods\n      .approve(\"0xb66Ea41efee7C3Fa41E2137531F6ff08392eC8Af\", 1e12)\n      .send({\n        to: blockchain.smartContract.address, // Smart Contract Adress\n        from: blockchain.account,                    \n      })    \n      \n      .then((receipt) => {\n        console.log(receipt);        \n      });\n  };\n  const StakeSharedWallet = () => {\n    //console.log(blockchain.stakingContract.methods)\n    blockchain.stakingContract.methods\n      .stakeTokens(stakingAmount*1e2, false)\n      .send({\n        to: blockchain.stakingContract.address, // Smart Contract Adress\n        from: blockchain.account,                    \n      })    \n      \n      .then((receipt) => {\n        console.log(receipt);        \n      });\n  };\n  const Stake = () => {\n    //console.log(blockchain.account)\n    blockchain.stakingContract.methods\n      .stakeTokens(stakingAmount*1e2, true)\n      .send({\n        to: blockchain.stakingContract.address, // Smart Contract Adress\n        from: blockchain.account,                    \n      })    \n      \n      .then((receipt) => {\n        console.log(receipt);        \n      });\n  };\n  const withdrawStake = () => {\n    //console.log(blockchain.account)\n    blockchain.stakingContract.methods\n      .withdrawStake(data.userInfo[0])\n      .send({\n        to: blockchain.stakingContract.address, // Smart Contract Adress\n        from: blockchain.account,                    \n      })    \n      \n      .then((receipt) => {\n        console.log(receipt);        \n      });\n  };\n\n\n  useEffect(() => {\n    getData();\n  }, [blockchain.account]);\n\n\n  return (\n    <div>\n\n      <VStack w='99vw' minH='80vh' alignItems='left' bg='white'>\n        <Button borderColor=\"red.500\"\n          borderRadius='20'\n          boxShadow='lg'\n          variant=\"outline\"\n          onClick={() => {\n            dispatch(connect())\n          }}>\n          connect\n        </Button>\n        <Button borderColor=\"red.500\"\n          borderRadius='20'\n          boxShadow='lg'\n          variant=\"outline\"\n          onClick={() => {\n            approveStaking()\n          }}>\n          Approve\n        </Button>\n\n        <Input\n          value={stakingAmount}\n          onChange={handleChange}\n          placeholder=\"Amount to Stake\"\n          size=\"sm\"\n          borderRadius='20'\n          bg='blue.200'\n          x\n        />\n        <Button borderColor=\"red.500\"\n          borderRadius='20'\n          boxShadow='lg'\n          variant=\"outline\"\n          onClick={() => {\n            StakeSharedWallet()\n          }}>\n          StakeSharedWallet\n        </Button>\n        <Button borderColor=\"red.500\"\n          borderRadius='20'\n          boxShadow='lg'\n          variant=\"outline\"\n          onClick={() => {\n            Stake()\n          }}>\n          Stake\n        </Button>\n        <Button borderColor=\"red.500\"\n          borderRadius='20'\n          boxShadow='lg'\n          variant=\"outline\"\n          onClick={() => {\n            withdrawStake()\n          }}>\n          WithdrawStake\n        </Button>\n\n        {blockchain.account == \"\" || blockchain.smartContract == null || data.userInfo == null ? (null):(\n          <VStack>\n          <Text>Pending Reward: {data.pendingReward / 1e18}</Text>\n          <Text>All Staked Amount: {data.allStakedAmount / 1e2}</Text>\n          <Text>User Staked Amount: {data.userInfo[0] / 1e2}</Text>\n          <Text>Is Validator: {data.isValidator}</Text>\n          <Text>Number of Participants: {data.participants}</Text>\n          <Text>Shared Wallet Staked Amount: {data.sharedWalletStakedAmount/1e2}</Text>\n          </VStack>\n        )}\n        \n      </VStack>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider resetCSS>  \n        <App />      \n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}